openapi: 3.0.1
info:
  title: Seabnb Management API
  version: '1.0'
  description: >
    API for managing the Seabnb web application.
paths:
  /boats:
    get:
      tags:
        - boats
      description: Get a list of all boats.
      responses:
        '200':
          description: Successfully retrieved the list of boats.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Boat'
        '404':
          description: No boats found.
          
  /boats/{id}:
    get:
      tags:
        - boats
      description: Get information about a specific boat.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the boat to retrieve.
      responses:
        '200':
          description: Successfully retrieved boat information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Boat'
        '404':
          description: Boat not found.
          
    patch:
      tags:
        - boats
      description: Update information about a specific boat.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the boat to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Boat'
      responses:
        '200':
          description: Boat information updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Boat'
        '404':
          description: Boat not found.
          
    post:
      tags:
        - boats
      description: Create a new boat.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Boat'
      responses:
        '201':
          description: Boat successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Boat'
        '400':
          description: Bad request. Invalid boat data.
        '500':
          description: Internal server error.
          
    delete:
      tags:
        - boats
      description: Delete a specific boat.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the boat to delete.
      responses:
        '204':
          description: Boat successfully deleted.
        '404':
          description: Boat not found.
          
          
  /users:
    get:
      tags:
        - users
      description: Get a list of all users.
      responses:
        '200':
          description: Successfully retrieved the list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: No users found.
          
  /users/{id}:
    get:
      tags:
        - users
      description: Get information about a specific user.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the user to retrieve.
      responses:
        '200':
          description: Successfully retrieved user information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.
          
    post:
      tags:
        - users
      description: Create a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request. Invalid user data.
        '500':
          description: Internal server error.

    patch:
      tags:
        - users
      description: Update information about a specific user.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the user to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User information updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.
          
    delete:
      tags:
        - users
      description: Delete a specific user.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the user to delete.
      responses:
        '204':
          description: User successfully deleted.
        '404':
          description: User not found.
          
          
  /reservations:
    get:
      tags:
        - reservations
      description: Get a list of all reservations.
      responses:
        '200':
          description: Successfully retrieved the list of reservations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'
        '404':
          description: No reservations found.
          
  /reservations/{id}:
    get:
      tags:
        - reservations
      description: Get information about a specific reservation.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the reservation to retrieve.
      responses:
        '200':
          description: Successfully retrieved reservation information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '404':
          description: Reservation not found.
          
    post:
      tags:
        - reservations
      description: Create a new reservation.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
      responses:
        '201':
          description: Reservation successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '400':
          description: Bad request. Invalid reservation data.
        '500':
          description: Internal server error.
          
    patch:
      tags:
        - reservations
      description: Update information about a specific reservation.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the reservation to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
      responses:
        '200':
          description: Reservation information updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '404':
          description: Reservation not found.
          
    delete:
      tags:
        - reservations
      description: Delete a specific reservation.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the reservation to delete.
      responses:
        '204':
          description: Reservation successfully deleted.
        '404':
          description: Reservation not found.
          
          
  /comments:
    get:
      tags:
        - comments
      description: Get a list of all comments.
      responses:
        '200':
          description: Successfully retrieved the list of comments.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '404':
          description: No comments found.
    
  /comments/{id}:
    get:
      tags:
        - comments
      description: Get information about a specific comment.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the comment to retrieve.
      responses:
        '200':
          description: Successfully retrieved comment information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          description: Comment not found.
          
    post:
      tags:
        - comments
      description: Create a new comment.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Comment successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Bad request. Invalid comment data.
        '500':
          description: Internal server error.

    patch:
      tags:
        - comments
      description: Update information about a specific comment.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the comment to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          description: Comment information updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          description: Comment not found.
          
    delete:
      tags:
        - comments
      description: Delete a specific comment.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the comment to delete.
      responses:
        '204':
          description: Comment successfully deleted.
        '404':
          description: Comment not found.
          
          
components:
  schemas:
    Boat:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        width:
          type: number
        length:
          type: number
        motorized:
          type: object
        port:
          type: object
        country:
          type: string
        type:
          type: string
        skipper:
          type: string
        pictures:
          type: object
        equipments:
          type: object
        specifications:
          type: object
        availability:
          type: object
        deposit:
          type: string
        note:
          type: number
        propertyPapers:
          type: object
        idOwner:
          type: number

    User:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        firstName:
          type: string
        age:
          type: number
        emailAddress:
          type: string
        phoneNumber:
          type: string
        password:
          type: string
        salt:
          type: string
        note:
          type: number
        creationDate:
          type: string
        profilePicture:
          type: string
        status:
          type: string
        isOwner:
          type: boolean

    Reservation:
      type: object
      properties:
        id:
          type: number
        startingDate:
          type: string
        duration:
          type: number
        ppn:
          type: number
        note:
          type: number
        idClient:
          type: number
        idBoat:
          type: number

    Comment:
      type: object
      properties:
        id:
          type: number
        content:
          type: string
        dates:
          type: object
        idClient:
          type: number
        idReservation:
          type: number
